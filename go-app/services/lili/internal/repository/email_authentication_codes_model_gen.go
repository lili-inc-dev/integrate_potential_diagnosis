// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	emailAuthenticationCodesFieldNames          = builder.RawFieldNames(&EmailAuthenticationCodes{})
	emailAuthenticationCodesRows                = strings.Join(emailAuthenticationCodesFieldNames, ",")
	emailAuthenticationCodesRowsExpectAutoSet   = strings.Join(stringx.Remove(emailAuthenticationCodesFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	emailAuthenticationCodesRowsWithPlaceHolder = strings.Join(stringx.Remove(emailAuthenticationCodesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheEmailAuthenticationCodesIdPrefix = "cache:emailAuthenticationCodes:id:"
)

type (
	emailAuthenticationCodesModel interface {
		Insert(ctx context.Context, data *EmailAuthenticationCodes) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*EmailAuthenticationCodes, error)
		Update(ctx context.Context, data *EmailAuthenticationCodes) error
		Delete(ctx context.Context, id string) error
	}

	defaultEmailAuthenticationCodesModel struct {
		sqlc.CachedConn
		table string
	}

	EmailAuthenticationCodes struct {
		Id             string    `db:"id"` // ULID
		InactiveUserId string    `db:"inactive_user_id"`
		CodeHash       string    `db:"code_hash"`     // 認証コードのハッシュ値
		AttemptCount   uint64    `db:"attempt_count"` // 試行回数
		CreatedAt      time.Time `db:"created_at"`
		UpdatedAt      time.Time `db:"updated_at"`
	}
)

func newEmailAuthenticationCodesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultEmailAuthenticationCodesModel {
	return &defaultEmailAuthenticationCodesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`email_authentication_codes`",
	}
}

func (m *defaultEmailAuthenticationCodesModel) Delete(ctx context.Context, id string) error {
	emailAuthenticationCodesIdKey := fmt.Sprintf("%s%v", cacheEmailAuthenticationCodesIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, emailAuthenticationCodesIdKey)
	return err
}

func (m *defaultEmailAuthenticationCodesModel) FindOne(ctx context.Context, id string) (*EmailAuthenticationCodes, error) {
	emailAuthenticationCodesIdKey := fmt.Sprintf("%s%v", cacheEmailAuthenticationCodesIdPrefix, id)
	var resp EmailAuthenticationCodes
	err := m.QueryRowCtx(ctx, &resp, emailAuthenticationCodesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", emailAuthenticationCodesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmailAuthenticationCodesModel) Insert(ctx context.Context, data *EmailAuthenticationCodes) (sql.Result, error) {
	emailAuthenticationCodesIdKey := fmt.Sprintf("%s%v", cacheEmailAuthenticationCodesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, emailAuthenticationCodesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.InactiveUserId, data.CodeHash, data.AttemptCount, data.CreatedAt, data.UpdatedAt)
	}, emailAuthenticationCodesIdKey)
	return ret, err
}

func (m *defaultEmailAuthenticationCodesModel) Update(ctx context.Context, data *EmailAuthenticationCodes) error {
	emailAuthenticationCodesIdKey := fmt.Sprintf("%s%v", cacheEmailAuthenticationCodesIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, emailAuthenticationCodesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.InactiveUserId, data.CodeHash, data.AttemptCount, data.CreatedAt, data.UpdatedAt, data.Id)
	}, emailAuthenticationCodesIdKey)
	return err
}

func (m *defaultEmailAuthenticationCodesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheEmailAuthenticationCodesIdPrefix, primary)
}

func (m *defaultEmailAuthenticationCodesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", emailAuthenticationCodesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultEmailAuthenticationCodesModel) tableName() string {
	return m.table
}

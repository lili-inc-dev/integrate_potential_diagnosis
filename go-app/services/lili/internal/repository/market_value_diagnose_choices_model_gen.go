// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	marketValueDiagnoseChoicesFieldNames          = builder.RawFieldNames(&MarketValueDiagnoseChoices{})
	marketValueDiagnoseChoicesRows                = strings.Join(marketValueDiagnoseChoicesFieldNames, ",")
	marketValueDiagnoseChoicesRowsExpectAutoSet   = strings.Join(stringx.Remove(marketValueDiagnoseChoicesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	marketValueDiagnoseChoicesRowsWithPlaceHolder = strings.Join(stringx.Remove(marketValueDiagnoseChoicesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheMarketValueDiagnoseChoicesIdPrefix   = "cache:marketValueDiagnoseChoices:id:"
	cacheMarketValueDiagnoseChoicesNamePrefix = "cache:marketValueDiagnoseChoices:name:"
)

type (
	marketValueDiagnoseChoicesModel interface {
		Insert(ctx context.Context, data *MarketValueDiagnoseChoices) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*MarketValueDiagnoseChoices, error)
		FindOneByName(ctx context.Context, name string) (*MarketValueDiagnoseChoices, error)
		Update(ctx context.Context, data *MarketValueDiagnoseChoices) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultMarketValueDiagnoseChoicesModel struct {
		sqlc.CachedConn
		table string
	}

	MarketValueDiagnoseChoices struct {
		Id        uint64    `db:"id"`
		Name      string    `db:"name"` // 選択肢名（例：はい、いいえ）
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newMarketValueDiagnoseChoicesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultMarketValueDiagnoseChoicesModel {
	return &defaultMarketValueDiagnoseChoicesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`market_value_diagnose_choices`",
	}
}

func (m *defaultMarketValueDiagnoseChoicesModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	marketValueDiagnoseChoicesIdKey := fmt.Sprintf("%s%v", cacheMarketValueDiagnoseChoicesIdPrefix, id)
	marketValueDiagnoseChoicesNameKey := fmt.Sprintf("%s%v", cacheMarketValueDiagnoseChoicesNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, marketValueDiagnoseChoicesIdKey, marketValueDiagnoseChoicesNameKey)
	return err
}

func (m *defaultMarketValueDiagnoseChoicesModel) FindOne(ctx context.Context, id uint64) (*MarketValueDiagnoseChoices, error) {
	marketValueDiagnoseChoicesIdKey := fmt.Sprintf("%s%v", cacheMarketValueDiagnoseChoicesIdPrefix, id)
	var resp MarketValueDiagnoseChoices
	err := m.QueryRowCtx(ctx, &resp, marketValueDiagnoseChoicesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", marketValueDiagnoseChoicesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMarketValueDiagnoseChoicesModel) FindOneByName(ctx context.Context, name string) (*MarketValueDiagnoseChoices, error) {
	marketValueDiagnoseChoicesNameKey := fmt.Sprintf("%s%v", cacheMarketValueDiagnoseChoicesNamePrefix, name)
	var resp MarketValueDiagnoseChoices
	err := m.QueryRowIndexCtx(ctx, &resp, marketValueDiagnoseChoicesNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", marketValueDiagnoseChoicesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMarketValueDiagnoseChoicesModel) Insert(ctx context.Context, data *MarketValueDiagnoseChoices) (sql.Result, error) {
	marketValueDiagnoseChoicesIdKey := fmt.Sprintf("%s%v", cacheMarketValueDiagnoseChoicesIdPrefix, data.Id)
	marketValueDiagnoseChoicesNameKey := fmt.Sprintf("%s%v", cacheMarketValueDiagnoseChoicesNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, marketValueDiagnoseChoicesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.CreatedAt, data.UpdatedAt)
	}, marketValueDiagnoseChoicesIdKey, marketValueDiagnoseChoicesNameKey)
	return ret, err
}

func (m *defaultMarketValueDiagnoseChoicesModel) Update(ctx context.Context, newData *MarketValueDiagnoseChoices) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	marketValueDiagnoseChoicesIdKey := fmt.Sprintf("%s%v", cacheMarketValueDiagnoseChoicesIdPrefix, data.Id)
	marketValueDiagnoseChoicesNameKey := fmt.Sprintf("%s%v", cacheMarketValueDiagnoseChoicesNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, marketValueDiagnoseChoicesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	}, marketValueDiagnoseChoicesIdKey, marketValueDiagnoseChoicesNameKey)
	return err
}

func (m *defaultMarketValueDiagnoseChoicesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMarketValueDiagnoseChoicesIdPrefix, primary)
}

func (m *defaultMarketValueDiagnoseChoicesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", marketValueDiagnoseChoicesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMarketValueDiagnoseChoicesModel) tableName() string {
	return m.table
}

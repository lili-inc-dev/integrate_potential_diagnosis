// Code generated by goctl. DO NOT EDIT.
package types

type CreateAdminReq struct {
	RoleId      uint64 `json:"role_id"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	Name        string `json:"name"`
	Affiliation string `json:"affiliation,optional,omitempty"`
	IsDisabled  bool   `json:"is_disabled"`
}

type UpdateAdminReq struct {
	Id          uint64  `path:"id"`
	RoleId      uint64  `json:"role_id"`
	Email       string  `json:"email"`
	Name        string  `json:"name"`
	Affiliation *string `json:"affiliation,optional,omitempty"`
	IsDisabled  bool    `json:"is_disabled"`
}

type CareerWorkAnswer struct {
	QuestionKey string `json:"question_key"`
	Answer      string `json:"answer"`
	Index       int64  `json:"index"`
}

type CreateCareerWorkAnswerReq struct {
	Answers []CareerWorkAnswer `json:"answers"`
}

type ContactReq struct {
	Name    string  `json:"name"`
	Email   string  `json:"email"`
	Content *string `json:"content,optional"`
}

type FindNoticeListReq struct {
	Page     uint64 `form:"page,optional,default=1"`
	PageSize uint64 `form:"page_size,range=[1:30],optional,default=10"`
}

type Notice struct {
	Id         uint64 `json:"id"`
	Title      string `json:"title"`
	Content    string `json:"content"`
	IsReleased bool   `json:"is_released"`
	CreatedAt  string `json:"created_at"`
	UpdatedAt  string `json:"updated_at"`
}

type NoticeForUser struct {
	Id        uint64 `json:"id"`
	Title     string `json:"title"`
	Content   string `json:"content"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
}

type FindNoticeListRes struct {
	PageCount uint64          `json:"page_count"`
	Notices   []NoticeForUser `json:"notices"`
}

type FindNoticeListForAdminReq struct {
	Page     uint64 `form:"page,optional,default=1"`
	PageSize uint64 `form:"page_size,range=[1:30],optional,default=10"`
}

type FindNoticeListForAdminRes struct {
	PageCount uint64   `json:"page_count"`
	Notices   []Notice `json:"notices"`
}

type FindNoticeDetailForAdminReq struct {
	Id uint64 `path:"id"`
}

type FindNoticeDetailForAdminRes struct {
	Notice Notice `json:"notice"`
}

type CreateNoticeReq struct {
	Title      string `json:"title"`
	Content    string `json:"content"`
	IsReleased bool   `json:"is_released"`
}

type UpdateNoticeReq struct {
	Id         uint64 `path:"id"`
	Title      string `json:"title"`
	Content    string `json:"content"`
	IsReleased bool   `json:"is_released"`
}

type PersonalityDiagnoseQuestion struct {
	Id            uint64 `json:"id"`
	PersonalityID uint64 `json:"personality_id"`
	Index         int64  `json:"index"`
	Content       string `json:"content"`
}

type PersonalityDiagnoseChoice struct {
	Id   uint64 `json:"id"`
	Name string `json:"name"`
}

type FindPersonalityDiagnoseReq struct {
	QuestionPage       *uint64 `form:"question_page,optional"`
	QuestionPageSize   uint64  `form:"question_page_size,range=[1:30],optional,default=10"`
	TotalQuestionCount bool    `form:"total_question_count,optional,default=false"`
	Choice             bool    `form:"choice,optional,default=false"`
	PerfectPoint       bool    `form:"perfect_point,optional,default=false"`
}

type FindPersonalityDiagnoseRes struct {
	TotalQuestionCount *uint64                       `json:"total_question_count"`
	Questions          []PersonalityDiagnoseQuestion `json:"questions"`
	Choices            []PersonalityDiagnoseChoice   `json:"choices"`
	PerfectPoint       *uint64                       `json:"perfect_point"`
}

type PersonalityDiagnoseAnswerResult struct {
	PersonalityName string `json:"personality_name"`
	TotalPoint      uint64 `json:"total_point"`
}

type FindPersonalityDiagnoseAnswerResultRes struct {
	Results []PersonalityDiagnoseAnswerResult `json:"results"`
}

type PersonalityDiagnoseAnswer struct {
	QuestionId uint64 `json:"question_id"`
	ChoiceId   uint64 `json:"choice_id"`
}

type CreatePersonalityDiagnoseAnswerReq struct {
	Answers []PersonalityDiagnoseAnswer `json:"answers"`
}

type AdminRole struct {
	Id              uint64 `json:"id"`
	Name            string `json:"name"`
	AdminBrowsable  bool   `json:"admin_browsable"`
	AdminEditable   bool   `json:"admin_editable"`
	UserBrowsable   bool   `json:"user_browsable"`
	UserEditable    bool   `json:"user_editable"`
	NoticeBrowsable bool   `json:"notice_browsable"`
	NoticeEditable  bool   `json:"notice_editable"`
}

type AdminRoleWithGrantedCount struct {
	Id           uint64  `json:"id"`
	Name         string  `json:"name"`
	Description  *string `json:"description"`
	GrantedCount uint64  `json:"granted_count"`
}

type FindAdminRoleListRes struct {
	AdminRoles []AdminRoleWithGrantedCount `json:"admin_roles"`
}

type InterestTopic struct {
	Id   uint64 `json:"id"`
	Name string `json:"name"`
}

type DesiredAnnualIncome struct {
	Id    uint64 `json:"id"`
	Value string `json:"value"`
}

type GeneralEditUser struct {
	Email                 string          `json:"email"`
	Name                  string          `json:"name"`
	NickName              string          `json:"nickName"`
	GenderId              uint64          `json:"gender_id"`
	University            string          `json:"university"`
	Faculty               string          `json:"faculty"`
	Department            string          `json:"department"`
	GraduationYear        uint64          `json:"graduation_year"`
	Birthday              string          `json:"birthday"`
	PhoneNumber           string          `json:"phone_number"`
	PostalCode            string          `json:"postal_code"`
	Address               string          `json:"address"`
	ServiceTriggerId      uint64          `json:"service_trigger_id"`
	ServiceTriggerDetail  *string         `json:"service_trigger_detail"`
	Introducer            *string         `json:"introducer"`
	DesiredAnnualIncomeId uint64          `json:"desired_annual_income_id"`
	InterestTopics        []InterestTopic `json:"interest_topics"`
}

type Gender struct {
	Id   uint64 `json:"id"`
	Name string `json:"name"`
}

type ServiceTrigger struct {
	Id   uint64 `json:"id"`
	Name string `json:"name"`
}

type GeneralUserDetailRes struct {
	Email                    string          `json:"email"`
	Name                     string          `json:"name"`
	Nickname                 string          `json:"nickname"`
	GenderName               string          `json:"gender_name"`
	University               string          `json:"university"`
	Faculty                  string          `json:"faculty"`
	Department               string          `json:"department"`
	GraduationYear           uint64          `json:"graduation_year"`
	Birthday                 string          `json:"birthday"`
	PhoneNumber              string          `json:"phone_number"`
	PostalCode               string          `json:"postal_code"`
	Address                  string          `json:"address"`
	ServiceTriggerId         uint64          `json:"service_trigger_id"`
	ServiceTriggerName       string          `json:"service_trigger_name"`
	ServiceTriggerDetail     *string         `json:"service_trigger_detail"`
	DesiredAnnualIncomeId    uint64          `json:"desired_annual_income_id"`
	DesiredAnnualIncomeValue string          `json:"desired_annual_income_value"`
	InterestTopics           []InterestTopic `json:"interest_topics"`
	Introducer               *string         `json:"introducer"`
	LineId                   string          `json:"line_id"`
	LineName                 string          `json:"line_name"`
	IconUrl                  string          `json:"icon_url"`
	StatusMessage            string          `json:"status_message"`
}

type UpdateGeneralUserReq struct {
	Name                  string   `json:"name"`
	NickName              string   `json:"nickname"`
	GenderId              uint64   `json:"gender_id"`
	University            string   `json:"university"`
	Faculty               string   `json:"faculty"`
	Department            string   `json:"department"`
	GraduationYear        uint64   `json:"graduation_year"`
	Birthday              string   `json:"birthday"`
	PhoneNumber           string   `json:"phone_number"`
	PostalCode            string   `json:"postal_code"`
	Address               string   `json:"address"`
	ServiceTriggerId      uint64   `json:"service_trigger_id"`
	ServiceTriggerDetail  *string  `json:"service_trigger_detail,optional"`
	Introducer            *string  `json:"introducer,optional"`
	DesiredAnnualIncomeId uint64   `json:"desired_annual_income_id"`
	InterestTopicIds      []uint64 `json:"interest_topic_ids"`
}

type MarketValueDiagnoseQuestion struct {
	Id            uint64 `json:"id"`
	MarketValueId uint64 `json:"market_value_id"`
	Index         int64  `json:"index"`
	Content       string `json:"content"`
}

type MarketValueDiagnoseChoice struct {
	Id   uint64 `json:"id"`
	Name string `json:"name"`
}

type FindMarketValueDiagnoseReq struct {
	QuestionPage       *uint64 `form:"question_page,optional"`
	TotalQuestionCount bool    `form:"total_question_count,optional,default=false"`
	TotalPageCount     bool    `form:"total_page_count,optional,default=false"`
	Choice             bool    `form:"choice,optional,default=false"`
	PerfectPoint       bool    `form:"perfect_point,optional,default=false"`
}

type FindMarketValueDiagnoseRes struct {
	TotalQuestionCount *uint64                       `json:"total_question_count"`
	TotalPageCount     *uint64                       `json:"total_page_count"`
	MarketValueName    *string                       `json:"market_value_name"`
	Questions          []MarketValueDiagnoseQuestion `json:"questions"`
	Choices            []MarketValueDiagnoseChoice   `json:"choices"`
	PerfectPoint       *uint64                       `json:"perfect_point"`
}

type MarketValueDiagnoseAnswerResult struct {
	MarketValueName string `json:"market_value_name"`
	TotalPoint      uint64 `json:"total_point"`
}

type FindMarketValueDiagnoseAnswerResultRes struct {
	Results []MarketValueDiagnoseAnswerResult `json:"results"`
}

type MarketValueDiagnoseAnswer struct {
	QuestionId uint64 `json:"question_id"`
	ChoiceId   uint64 `json:"choice_id"`
}

type CreateMarketValueDiagnoseAnswerReq struct {
	Answers []MarketValueDiagnoseAnswer `json:"answers"`
}

type LineCallbackReq struct {
	AuthCode string `json:"auth_code"`
	State    string `json:"state"`
}

type LineCallbackRes struct {
	FirebaseCustomToken string `json:"firebase_custom_token"`
}

type FrontUser struct {
	Id        string  `json:"id"`
	IconUrl   string  `json:"icon_url"`
	Name      string  `json:"name"`
	UserType  string  `json:"user_type"`
	LineId    string  `json:"line_id"`
	Status    string  `json:"status"`
	CsStatus  string  `json:"cs_status"`
	Memo      *string `json:"memo"`
	CreatedAt string  `json:"created_at"`
}

type FrontUserListReq struct {
	Search   *string `form:"search,optional,omitempty"`
	CsStatus *string `form:"cs_status,optional,omitempty,options=register_only|diagnosing|normal"`
	Page     uint64  `form:"page,optional,default=1"`
	PageSize uint64  `form:"page_size,range=[1:30],optional,default=10"`
}

type FrontUserListRes struct {
	PageCount uint64      `json:"page_count"`
	Users     []FrontUser `json:"users"`
}

type FrontUserDetailReq struct {
	Id                      string `path:"id"`
	DiagnoseHistoryPage     uint64 `form:"diagnose_history_page"`
	DiagnoseHistoryPageSize uint64 `form:"diagnose_history_page_size,range=[1:30],optional,default=10"`
}

type DiagnoseHistory struct {
	DiagnoseType  string `json:"diagnose_type"`
	DiagnoseName  string `json:"diagnose_name"`
	AnswerGroupId string `json:"answer_group_id"`
	CreatedAt     string `json:"created_at"`
}

type FrontUserDetailRes struct {
	Id                       string            `json:"id"`
	LineId                   string            `json:"line_id"`
	UserType                 string            `json:"user_type"`
	Gender                   string            `json:"gender"`
	Name                     string            `json:"name"`
	Nickname                 string            `json:"nickname"`
	IconUrl                  string            `json:"icon_url"`
	University               string            `json:"university"`
	Faculty                  string            `json:"faculty"`
	Department               string            `json:"department"`
	GraduationYear           uint64            `json:"graduation_year"`
	Birthday                 string            `json:"birthday"`
	Email                    string            `json:"email"`
	PhoneNumber              string            `json:"phone_number"`
	PostalCode               string            `json:"postal_code"`
	Address                  string            `json:"address"`
	CreatedAt                string            `json:"created_at"`
	ServiceTrigger           string            `json:"service_trigger"`
	ServiceTriggerDetail     *string           `json:"service_trigger_detail"`
	Introducer               *string           `json:"introducer"`
	InterestTopics           []string          `json:"interest_topics"`
	Memo                     *string           `json:"memo"`
	Status                   string            `json:"status"`
	CsStatus                 string            `json:"cs_status"`
	DesiredAnnualIncome      string            `json:"desired_annual_income"`
	DiagnoseHistories        []DiagnoseHistory `json:"diagnose_histories"`
	DiagnoseHistoryPageCount uint64            `json:"diagnose_history_page_count"`
}

type DiagnoseResultReq struct {
	DiagnoseType  string `form:"diagnose_type,options=career_work|market_value|personality"`
	AnswerGroupId string `path:"answer_group_id"`
}

type DiagnoseResultRes struct {
	PersonalityDiagnoseAnswerResult []PersonalityDiagnoseAnswerResult `json:"personality_diagnose_answer_result_list,optional,omitempty"`
	MarketValueDiagnoseAnswerResult []MarketValueDiagnoseAnswerResult `json:"market_value_diagnose_answer_result_list,optional,omitempty"`
	CareerWorkAnswer                []CareerWorkAnswer                `json:"career_work_answer_list,optional,omitempty"`
}

type UpdateFrontUserReq struct {
	Id     string  `path:"id"`
	Memo   *string `json:"memo,optional,omitempty"`
	Status string  `json:"status,options=registered|banned"`
}

type AdminWithRoleInfo struct {
	Id           uint64  `json:"id"`
	RoleId       string  `json:"role_id"`
	RoleName     string  `json:"role_name"`
	Email        string  `json:"email"`
	Name         string  `json:"name"`
	LastAccessAt string  `json:"last_access_at"`
	Affiliation  *string `json:"affiliation"`
	Status       bool    `json:"is_disabled"`
}

type FindAdminReq struct {
	Id uint64 `path:"id"`
}

type FindAdminRes struct {
	Admin AdminWithRoleInfo `json:"admin"`
}

type FindAdminListReq struct {
	Page     uint64 `form:"page,optional,default=1"`
	PageSize uint64 `form:"page_size,range=[1:30],optional,default=10"`
}

type FindAdminListRes struct {
	PageCount uint64              `json:"page_count"`
	Admins    []AdminWithRoleInfo `json:"admins"`
}

type FindMyPageRes struct {
	Email string `json:"email"`
}

type UpdateMyPageReq struct {
	Password string `json:"password"`
}

type FindInactiveUserRes struct {
	LineId        string `json:"line_id"`
	LineName      string `json:"line_name"`
	IconUrl       string `json:"icon_url"`
	StatusMessage string `json:"status_message"`
	TypeId        uint64 `json:"type_id"`
	Email         string `json:"email"`
	Name          string `json:"name"`
}

type CreateInactiveUserReq struct {
	TypeId uint64 `json:"type_id"`
	Email  string `json:"email"`
	Name   string `json:"name"`
}

type CreateInactiveUserRes struct {
	FirebaseCustomToken string `json:"firebase_custom_token"`
}

type ConfirmInactiveUserEmailReq struct {
	AuthCode string `json:"auth_code"`
}

type CreateUserReq struct {
	Name                  string   `json:"name"`
	NickName              string   `json:"nickname"`
	GenderId              uint64   `json:"gender_id"`
	University            string   `json:"university"`
	Faculty               string   `json:"faculty"`
	Department            string   `json:"department"`
	GraduationYear        uint64   `json:"graduation_year"`
	Birthday              string   `json:"birthday"`
	PhoneNumber           string   `json:"phone_number"`
	PostalCode            string   `json:"postal_code"`
	Address               string   `json:"address"`
	ServiceTriggerId      uint64   `json:"service_trigger_id"`
	ServiceTriggerDetail  *string  `json:"service_trigger_detail,optional"`
	Introducer            *string  `json:"introducer,optional"`
	DesiredAnnualIncomeId uint64   `json:"desired_annual_income_id"`
	InterestTopicIds      []uint64 `json:"interest_topic_ids"`
}

type FindGenderListRes struct {
	Genders []Gender `json:"genders"`
}

type FindServiceTriggerListRes struct {
	ServiceTriggers []ServiceTrigger `json:"service_triggers"`
}

type FindDesiredAnnualIncomeListRes struct {
	DesiredAnnualIncomes []DesiredAnnualIncome `json:"desired_annual_incomes"`
}

type FindInterestTopicListRes struct {
	InterestTopics []InterestTopic `json:"interest_topics"`
}

type UnregisterUserReq struct {
	UnregistrationReasonId uint64 `json:"unregistration_reason_id"`
}

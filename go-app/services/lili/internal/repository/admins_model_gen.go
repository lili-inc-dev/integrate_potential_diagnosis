// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminsFieldNames          = builder.RawFieldNames(&Admins{})
	adminsRows                = strings.Join(adminsFieldNames, ",")
	adminsRowsExpectAutoSet   = strings.Join(stringx.Remove(adminsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	adminsRowsWithPlaceHolder = strings.Join(stringx.Remove(adminsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheAdminsIdPrefix          = "cache:admins:id:"
	cacheAdminsFirebaseUidPrefix = "cache:admins:firebaseUid:"
)

type (
	adminsModel interface {
		Insert(ctx context.Context, data *Admins) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Admins, error)
		FindOneByFirebaseUid(ctx context.Context, firebaseUid string) (*Admins, error)
		Update(ctx context.Context, data *Admins) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultAdminsModel struct {
		sqlc.CachedConn
		table string
	}

	Admins struct {
		Id           uint64         `db:"id"`
		RoleId       uint64         `db:"role_id"`
		FirebaseUid  string         `db:"firebase_uid"` // firebase user id
		Name         string         `db:"name"`
		Affiliation  sql.NullString `db:"affiliation"` // 所属（自由記述）
		IsDisabled   bool           `db:"is_disabled"` // 無効状態かどうか
		LastAccessAt time.Time      `db:"last_access_at"`
		CreatedAt    time.Time      `db:"created_at"`
		UpdatedAt    time.Time      `db:"updated_at"`
	}
)

func newAdminsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAdminsModel {
	return &defaultAdminsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`admins`",
	}
}

func (m *defaultAdminsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	adminsFirebaseUidKey := fmt.Sprintf("%s%v", cacheAdminsFirebaseUidPrefix, data.FirebaseUid)
	adminsIdKey := fmt.Sprintf("%s%v", cacheAdminsIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, adminsFirebaseUidKey, adminsIdKey)
	return err
}

func (m *defaultAdminsModel) FindOne(ctx context.Context, id uint64) (*Admins, error) {
	adminsIdKey := fmt.Sprintf("%s%v", cacheAdminsIdPrefix, id)
	var resp Admins
	err := m.QueryRowCtx(ctx, &resp, adminsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminsModel) FindOneByFirebaseUid(ctx context.Context, firebaseUid string) (*Admins, error) {
	adminsFirebaseUidKey := fmt.Sprintf("%s%v", cacheAdminsFirebaseUidPrefix, firebaseUid)
	var resp Admins
	err := m.QueryRowIndexCtx(ctx, &resp, adminsFirebaseUidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `firebase_uid` = ? limit 1", adminsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, firebaseUid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminsModel) Insert(ctx context.Context, data *Admins) (sql.Result, error) {
	adminsFirebaseUidKey := fmt.Sprintf("%s%v", cacheAdminsFirebaseUidPrefix, data.FirebaseUid)
	adminsIdKey := fmt.Sprintf("%s%v", cacheAdminsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, adminsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RoleId, data.FirebaseUid, data.Name, data.Affiliation, data.IsDisabled, data.CreatedAt, data.UpdatedAt)
	}, adminsFirebaseUidKey, adminsIdKey)
	return ret, err
}

func (m *defaultAdminsModel) Update(ctx context.Context, newData *Admins) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	adminsFirebaseUidKey := fmt.Sprintf("%s%v", cacheAdminsFirebaseUidPrefix, data.FirebaseUid)
	adminsIdKey := fmt.Sprintf("%s%v", cacheAdminsIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.RoleId, newData.FirebaseUid, newData.Name, newData.Affiliation, newData.IsDisabled, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	}, adminsFirebaseUidKey, adminsIdKey)
	return err
}

func (m *defaultAdminsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAdminsIdPrefix, primary)
}

func (m *defaultAdminsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAdminsModel) tableName() string {
	return m.table
}

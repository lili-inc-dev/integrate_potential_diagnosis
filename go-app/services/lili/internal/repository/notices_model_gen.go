// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	noticesFieldNames          = builder.RawFieldNames(&Notices{})
	noticesRows                = strings.Join(noticesFieldNames, ",")
	noticesRowsExpectAutoSet   = strings.Join(stringx.Remove(noticesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	noticesRowsWithPlaceHolder = strings.Join(stringx.Remove(noticesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheNoticesIdPrefix = "cache:notices:id:"
)

type (
	noticesModel interface {
		Insert(ctx context.Context, data *Notices) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Notices, error)
		Update(ctx context.Context, data *Notices) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultNoticesModel struct {
		sqlc.CachedConn
		table string
	}

	Notices struct {
		Id         uint64    `db:"id"`
		Title      string    `db:"title"`       // お知らせタイトル
		Content    string    `db:"content"`     // お知らせ内容
		IsReleased bool      `db:"is_released"` // 公開状態かどうか
		CreatedAt  time.Time `db:"created_at"`
		UpdatedAt  time.Time `db:"updated_at"`
	}
)

func newNoticesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultNoticesModel {
	return &defaultNoticesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`notices`",
	}
}

func (m *defaultNoticesModel) Delete(ctx context.Context, id uint64) error {
	noticesIdKey := fmt.Sprintf("%s%v", cacheNoticesIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, noticesIdKey)
	return err
}

func (m *defaultNoticesModel) FindOne(ctx context.Context, id uint64) (*Notices, error) {
	noticesIdKey := fmt.Sprintf("%s%v", cacheNoticesIdPrefix, id)
	var resp Notices
	err := m.QueryRowCtx(ctx, &resp, noticesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", noticesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNoticesModel) Insert(ctx context.Context, data *Notices) (sql.Result, error) {
	noticesIdKey := fmt.Sprintf("%s%v", cacheNoticesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, noticesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.Content, data.IsReleased, data.CreatedAt, data.UpdatedAt)
	}, noticesIdKey)
	return ret, err
}

func (m *defaultNoticesModel) Update(ctx context.Context, data *Notices) error {
	noticesIdKey := fmt.Sprintf("%s%v", cacheNoticesIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, noticesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Title, data.Content, data.IsReleased, data.CreatedAt, data.UpdatedAt, data.Id)
	}, noticesIdKey)
	return err
}

func (m *defaultNoticesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheNoticesIdPrefix, primary)
}

func (m *defaultNoticesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", noticesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultNoticesModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	interestTopicsFieldNames          = builder.RawFieldNames(&InterestTopics{})
	interestTopicsRows                = strings.Join(interestTopicsFieldNames, ",")
	interestTopicsRowsExpectAutoSet   = strings.Join(stringx.Remove(interestTopicsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	interestTopicsRowsWithPlaceHolder = strings.Join(stringx.Remove(interestTopicsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheInterestTopicsIdPrefix           = "cache:interestTopics:id:"
	cacheInterestTopicsDisplayOrderPrefix = "cache:interestTopics:displayOrder:"
	cacheInterestTopicsNamePrefix         = "cache:interestTopics:name:"
)

type (
	interestTopicsModel interface {
		Insert(ctx context.Context, data *InterestTopics) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*InterestTopics, error)
		FindOneByDisplayOrder(ctx context.Context, displayOrder uint64) (*InterestTopics, error)
		FindOneByName(ctx context.Context, name string) (*InterestTopics, error)
		Update(ctx context.Context, data *InterestTopics) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultInterestTopicsModel struct {
		sqlc.CachedConn
		table string
	}

	InterestTopics struct {
		Id           uint64 `db:"id"`
		Name         string `db:"name"`          // 項目名（例：ビジネス、ファッション）
		DisplayOrder uint64 `db:"display_order"` // 表示順番
	}
)

func newInterestTopicsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultInterestTopicsModel {
	return &defaultInterestTopicsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`interest_topics`",
	}
}

func (m *defaultInterestTopicsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	interestTopicsDisplayOrderKey := fmt.Sprintf("%s%v", cacheInterestTopicsDisplayOrderPrefix, data.DisplayOrder)
	interestTopicsIdKey := fmt.Sprintf("%s%v", cacheInterestTopicsIdPrefix, id)
	interestTopicsNameKey := fmt.Sprintf("%s%v", cacheInterestTopicsNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, interestTopicsDisplayOrderKey, interestTopicsIdKey, interestTopicsNameKey)
	return err
}

func (m *defaultInterestTopicsModel) FindOne(ctx context.Context, id uint64) (*InterestTopics, error) {
	interestTopicsIdKey := fmt.Sprintf("%s%v", cacheInterestTopicsIdPrefix, id)
	var resp InterestTopics
	err := m.QueryRowCtx(ctx, &resp, interestTopicsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", interestTopicsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInterestTopicsModel) FindOneByDisplayOrder(ctx context.Context, displayOrder uint64) (*InterestTopics, error) {
	interestTopicsDisplayOrderKey := fmt.Sprintf("%s%v", cacheInterestTopicsDisplayOrderPrefix, displayOrder)
	var resp InterestTopics
	err := m.QueryRowIndexCtx(ctx, &resp, interestTopicsDisplayOrderKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `display_order` = ? limit 1", interestTopicsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, displayOrder); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInterestTopicsModel) FindOneByName(ctx context.Context, name string) (*InterestTopics, error) {
	interestTopicsNameKey := fmt.Sprintf("%s%v", cacheInterestTopicsNamePrefix, name)
	var resp InterestTopics
	err := m.QueryRowIndexCtx(ctx, &resp, interestTopicsNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", interestTopicsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInterestTopicsModel) Insert(ctx context.Context, data *InterestTopics) (sql.Result, error) {
	interestTopicsDisplayOrderKey := fmt.Sprintf("%s%v", cacheInterestTopicsDisplayOrderPrefix, data.DisplayOrder)
	interestTopicsIdKey := fmt.Sprintf("%s%v", cacheInterestTopicsIdPrefix, data.Id)
	interestTopicsNameKey := fmt.Sprintf("%s%v", cacheInterestTopicsNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, interestTopicsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.DisplayOrder)
	}, interestTopicsDisplayOrderKey, interestTopicsIdKey, interestTopicsNameKey)
	return ret, err
}

func (m *defaultInterestTopicsModel) Update(ctx context.Context, newData *InterestTopics) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	interestTopicsDisplayOrderKey := fmt.Sprintf("%s%v", cacheInterestTopicsDisplayOrderPrefix, data.DisplayOrder)
	interestTopicsIdKey := fmt.Sprintf("%s%v", cacheInterestTopicsIdPrefix, data.Id)
	interestTopicsNameKey := fmt.Sprintf("%s%v", cacheInterestTopicsNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, interestTopicsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.DisplayOrder, newData.Id)
	}, interestTopicsDisplayOrderKey, interestTopicsIdKey, interestTopicsNameKey)
	return err
}

func (m *defaultInterestTopicsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheInterestTopicsIdPrefix, primary)
}

func (m *defaultInterestTopicsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", interestTopicsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultInterestTopicsModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lineAccountsFieldNames          = builder.RawFieldNames(&LineAccounts{})
	lineAccountsRows                = strings.Join(lineAccountsFieldNames, ",")
	lineAccountsRowsExpectAutoSet   = strings.Join(stringx.Remove(lineAccountsFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	lineAccountsRowsWithPlaceHolder = strings.Join(stringx.Remove(lineAccountsFieldNames, "`line_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheLineAccountsLineIdPrefix = "cache:lineAccounts:lineId:"
)

type (
	lineAccountsModel interface {
		Insert(ctx context.Context, data *LineAccounts) (sql.Result, error)
		FindOne(ctx context.Context, lineId string) (*LineAccounts, error)
		Update(ctx context.Context, data *LineAccounts) error
		Delete(ctx context.Context, lineId string) error
	}

	defaultLineAccountsModel struct {
		sqlc.CachedConn
		table string
	}

	LineAccounts struct {
		LineId        string         `db:"line_id"`        // LINEユーザID
		Name          string         `db:"name"`           // LINE表示名
		IconUrl       sql.NullString `db:"icon_url"`       // LINEアイコン画像URL
		StatusMessage sql.NullString `db:"status_message"` // LINEステータスメッセージ
		CreatedAt     time.Time      `db:"created_at"`
		UpdatedAt     time.Time      `db:"updated_at"`
	}
)

func newLineAccountsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultLineAccountsModel {
	return &defaultLineAccountsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`line_accounts`",
	}
}

func (m *defaultLineAccountsModel) Delete(ctx context.Context, lineId string) error {
	lineAccountsLineIdKey := fmt.Sprintf("%s%v", cacheLineAccountsLineIdPrefix, lineId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `line_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, lineId)
	}, lineAccountsLineIdKey)
	return err
}

func (m *defaultLineAccountsModel) FindOne(ctx context.Context, lineId string) (*LineAccounts, error) {
	lineAccountsLineIdKey := fmt.Sprintf("%s%v", cacheLineAccountsLineIdPrefix, lineId)
	var resp LineAccounts
	err := m.QueryRowCtx(ctx, &resp, lineAccountsLineIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `line_id` = ? limit 1", lineAccountsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, lineId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLineAccountsModel) Insert(ctx context.Context, data *LineAccounts) (sql.Result, error) {
	lineAccountsLineIdKey := fmt.Sprintf("%s%v", cacheLineAccountsLineIdPrefix, data.LineId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, lineAccountsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.LineId, data.Name, data.IconUrl, data.StatusMessage, data.CreatedAt, data.UpdatedAt)
	}, lineAccountsLineIdKey)
	return ret, err
}

func (m *defaultLineAccountsModel) Update(ctx context.Context, data *LineAccounts) error {
	lineAccountsLineIdKey := fmt.Sprintf("%s%v", cacheLineAccountsLineIdPrefix, data.LineId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `line_id` = ?", m.table, lineAccountsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.IconUrl, data.StatusMessage, data.CreatedAt, data.UpdatedAt, data.LineId)
	}, lineAccountsLineIdKey)
	return err
}

func (m *defaultLineAccountsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheLineAccountsLineIdPrefix, primary)
}

func (m *defaultLineAccountsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `line_id` = ? limit 1", lineAccountsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLineAccountsModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	generalUserProfilesFieldNames          = builder.RawFieldNames(&GeneralUserProfiles{})
	generalUserProfilesRows                = strings.Join(generalUserProfilesFieldNames, ",")
	generalUserProfilesRowsExpectAutoSet   = strings.Join(stringx.Remove(generalUserProfilesFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	generalUserProfilesRowsWithPlaceHolder = strings.Join(stringx.Remove(generalUserProfilesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGeneralUserProfilesIdPrefix     = "cache:generalUserProfiles:id:"
	cacheGeneralUserProfilesUserIdPrefix = "cache:generalUserProfiles:userId:"
)

type (
	generalUserProfilesModel interface {
		Insert(ctx context.Context, data *GeneralUserProfiles) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*GeneralUserProfiles, error)
		FindOneByUserId(ctx context.Context, userId string) (*GeneralUserProfiles, error)
		Update(ctx context.Context, data *GeneralUserProfiles) error
		Delete(ctx context.Context, id string) error
	}

	defaultGeneralUserProfilesModel struct {
		sqlc.CachedConn
		table string
	}

	GeneralUserProfiles struct {
		Id                    string         `db:"id"` // ULID
		UserId                string         `db:"user_id"`
		Nickname              string         `db:"nickname"`                 // ニックネーム
		University            string         `db:"university"`               // 大学
		Faculty               string         `db:"faculty"`                  // 学部
		Department            string         `db:"department"`               // 学科
		GraduationYear        uint64         `db:"graduation_year"`          // 大学卒業年度
		ServiceTriggerId      uint64         `db:"service_trigger_id"`       // サービスを知ったきっかけ
		ServiceTriggerDetail  sql.NullString `db:"service_trigger_detail"`   // サービスを知ったきっかけ（自由記述）
		Introducer            sql.NullString `db:"introducer"`               // 紹介者
		DesiredAnnualIncomeId uint64         `db:"desired_annual_income_id"` // 希望の年収
		CreatedAt             time.Time      `db:"created_at"`
		UpdatedAt             time.Time      `db:"updated_at"`
	}
)

func newGeneralUserProfilesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultGeneralUserProfilesModel {
	return &defaultGeneralUserProfilesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`general_user_profiles`",
	}
}

func (m *defaultGeneralUserProfilesModel) Delete(ctx context.Context, id string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	generalUserProfilesIdKey := fmt.Sprintf("%s%v", cacheGeneralUserProfilesIdPrefix, id)
	generalUserProfilesUserIdKey := fmt.Sprintf("%s%v", cacheGeneralUserProfilesUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, generalUserProfilesIdKey, generalUserProfilesUserIdKey)
	return err
}

func (m *defaultGeneralUserProfilesModel) FindOne(ctx context.Context, id string) (*GeneralUserProfiles, error) {
	generalUserProfilesIdKey := fmt.Sprintf("%s%v", cacheGeneralUserProfilesIdPrefix, id)
	var resp GeneralUserProfiles
	err := m.QueryRowCtx(ctx, &resp, generalUserProfilesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", generalUserProfilesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGeneralUserProfilesModel) FindOneByUserId(ctx context.Context, userId string) (*GeneralUserProfiles, error) {
	generalUserProfilesUserIdKey := fmt.Sprintf("%s%v", cacheGeneralUserProfilesUserIdPrefix, userId)
	var resp GeneralUserProfiles
	err := m.QueryRowIndexCtx(ctx, &resp, generalUserProfilesUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", generalUserProfilesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGeneralUserProfilesModel) Insert(ctx context.Context, data *GeneralUserProfiles) (sql.Result, error) {
	generalUserProfilesIdKey := fmt.Sprintf("%s%v", cacheGeneralUserProfilesIdPrefix, data.Id)
	generalUserProfilesUserIdKey := fmt.Sprintf("%s%v", cacheGeneralUserProfilesUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, generalUserProfilesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Nickname, data.University, data.Faculty, data.Department, data.GraduationYear, data.ServiceTriggerId, data.ServiceTriggerDetail, data.Introducer, data.DesiredAnnualIncomeId, data.CreatedAt, data.UpdatedAt)
	}, generalUserProfilesIdKey, generalUserProfilesUserIdKey)
	return ret, err
}

func (m *defaultGeneralUserProfilesModel) Update(ctx context.Context, newData *GeneralUserProfiles) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	generalUserProfilesIdKey := fmt.Sprintf("%s%v", cacheGeneralUserProfilesIdPrefix, data.Id)
	generalUserProfilesUserIdKey := fmt.Sprintf("%s%v", cacheGeneralUserProfilesUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, generalUserProfilesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.Nickname, newData.University, newData.Faculty, newData.Department, newData.GraduationYear, newData.ServiceTriggerId, newData.ServiceTriggerDetail, newData.Introducer, newData.DesiredAnnualIncomeId, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	}, generalUserProfilesIdKey, generalUserProfilesUserIdKey)
	return err
}

func (m *defaultGeneralUserProfilesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGeneralUserProfilesIdPrefix, primary)
}

func (m *defaultGeneralUserProfilesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", generalUserProfilesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGeneralUserProfilesModel) tableName() string {
	return m.table
}

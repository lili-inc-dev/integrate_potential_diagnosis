// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	careerWorkAnswersFieldNames          = builder.RawFieldNames(&CareerWorkAnswers{})
	careerWorkAnswersRows                = strings.Join(careerWorkAnswersFieldNames, ",")
	careerWorkAnswersRowsExpectAutoSet   = strings.Join(stringx.Remove(careerWorkAnswersFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	careerWorkAnswersRowsWithPlaceHolder = strings.Join(stringx.Remove(careerWorkAnswersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCareerWorkAnswersIdPrefix                            = "cache:careerWorkAnswers:id:"
	cacheCareerWorkAnswersAnswerGroupIdQuestionKeyIndexPrefix = "cache:careerWorkAnswers:answerGroupId:questionKey:index:"
)

type (
	careerWorkAnswersModel interface {
		Insert(ctx context.Context, data *CareerWorkAnswers) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*CareerWorkAnswers, error)
		FindOneByAnswerGroupIdQuestionKeyIndex(ctx context.Context, answerGroupId string, questionKey string, index int64) (*CareerWorkAnswers, error)
		Update(ctx context.Context, data *CareerWorkAnswers) error
		Delete(ctx context.Context, id string) error
	}

	defaultCareerWorkAnswersModel struct {
		sqlc.CachedConn
		table string
	}

	CareerWorkAnswers struct {
		Id            string    `db:"id"`              // ULID
		AnswerGroupId string    `db:"answer_group_id"` // ULID 回答グループごとに作成
		QuestionKey   string    `db:"question_key"`    // 設問のkey(フロント側で設定)
		Answer        string    `db:"answer"`          // 答え
		UserId        string    `db:"user_id"`         // ユーザーID
		Index         int64     `db:"index"`           // 回答順
		CreatedAt     time.Time `db:"created_at"`
		UpdatedAt     time.Time `db:"updated_at"`
	}
)

func newCareerWorkAnswersModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCareerWorkAnswersModel {
	return &defaultCareerWorkAnswersModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`career_work_answers`",
	}
}

func (m *defaultCareerWorkAnswersModel) Delete(ctx context.Context, id string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	careerWorkAnswersAnswerGroupIdQuestionKeyIndexKey := fmt.Sprintf("%s%v:%v:%v", cacheCareerWorkAnswersAnswerGroupIdQuestionKeyIndexPrefix, data.AnswerGroupId, data.QuestionKey, data.Index)
	careerWorkAnswersIdKey := fmt.Sprintf("%s%v", cacheCareerWorkAnswersIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, careerWorkAnswersAnswerGroupIdQuestionKeyIndexKey, careerWorkAnswersIdKey)
	return err
}

func (m *defaultCareerWorkAnswersModel) FindOne(ctx context.Context, id string) (*CareerWorkAnswers, error) {
	careerWorkAnswersIdKey := fmt.Sprintf("%s%v", cacheCareerWorkAnswersIdPrefix, id)
	var resp CareerWorkAnswers
	err := m.QueryRowCtx(ctx, &resp, careerWorkAnswersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", careerWorkAnswersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCareerWorkAnswersModel) FindOneByAnswerGroupIdQuestionKeyIndex(ctx context.Context, answerGroupId string, questionKey string, index int64) (*CareerWorkAnswers, error) {
	careerWorkAnswersAnswerGroupIdQuestionKeyIndexKey := fmt.Sprintf("%s%v:%v:%v", cacheCareerWorkAnswersAnswerGroupIdQuestionKeyIndexPrefix, answerGroupId, questionKey, index)
	var resp CareerWorkAnswers
	err := m.QueryRowIndexCtx(ctx, &resp, careerWorkAnswersAnswerGroupIdQuestionKeyIndexKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `answer_group_id` = ? and `question_key` = ? and `index` = ? limit 1", careerWorkAnswersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, answerGroupId, questionKey, index); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCareerWorkAnswersModel) Insert(ctx context.Context, data *CareerWorkAnswers) (sql.Result, error) {
	careerWorkAnswersAnswerGroupIdQuestionKeyIndexKey := fmt.Sprintf("%s%v:%v:%v", cacheCareerWorkAnswersAnswerGroupIdQuestionKeyIndexPrefix, data.AnswerGroupId, data.QuestionKey, data.Index)
	careerWorkAnswersIdKey := fmt.Sprintf("%s%v", cacheCareerWorkAnswersIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, careerWorkAnswersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.AnswerGroupId, data.QuestionKey, data.Answer, data.UserId, data.Index, data.CreatedAt, data.UpdatedAt)
	}, careerWorkAnswersAnswerGroupIdQuestionKeyIndexKey, careerWorkAnswersIdKey)
	return ret, err
}

func (m *defaultCareerWorkAnswersModel) Update(ctx context.Context, newData *CareerWorkAnswers) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	careerWorkAnswersAnswerGroupIdQuestionKeyIndexKey := fmt.Sprintf("%s%v:%v:%v", cacheCareerWorkAnswersAnswerGroupIdQuestionKeyIndexPrefix, data.AnswerGroupId, data.QuestionKey, data.Index)
	careerWorkAnswersIdKey := fmt.Sprintf("%s%v", cacheCareerWorkAnswersIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, careerWorkAnswersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.AnswerGroupId, newData.QuestionKey, newData.Answer, newData.UserId, newData.Index, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	}, careerWorkAnswersAnswerGroupIdQuestionKeyIndexKey, careerWorkAnswersIdKey)
	return err
}

func (m *defaultCareerWorkAnswersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCareerWorkAnswersIdPrefix, primary)
}

func (m *defaultCareerWorkAnswersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", careerWorkAnswersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCareerWorkAnswersModel) tableName() string {
	return m.table
}
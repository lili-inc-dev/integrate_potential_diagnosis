// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	personalityDiagnoseQuestionsFieldNames          = builder.RawFieldNames(&PersonalityDiagnoseQuestions{})
	personalityDiagnoseQuestionsRows                = strings.Join(personalityDiagnoseQuestionsFieldNames, ",")
	personalityDiagnoseQuestionsRowsExpectAutoSet   = strings.Join(stringx.Remove(personalityDiagnoseQuestionsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	personalityDiagnoseQuestionsRowsWithPlaceHolder = strings.Join(stringx.Remove(personalityDiagnoseQuestionsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cachePersonalityDiagnoseQuestionsIdPrefix      = "cache:personalityDiagnoseQuestions:id:"
	cachePersonalityDiagnoseQuestionsContentPrefix = "cache:personalityDiagnoseQuestions:content:"
	cachePersonalityDiagnoseQuestionsIndexPrefix   = "cache:personalityDiagnoseQuestions:index:"
)

type (
	personalityDiagnoseQuestionsModel interface {
		Insert(ctx context.Context, data *PersonalityDiagnoseQuestions) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*PersonalityDiagnoseQuestions, error)
		FindOneByContent(ctx context.Context, content string) (*PersonalityDiagnoseQuestions, error)
		FindOneByIndex(ctx context.Context, index int64) (*PersonalityDiagnoseQuestions, error)
		Update(ctx context.Context, data *PersonalityDiagnoseQuestions) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultPersonalityDiagnoseQuestionsModel struct {
		sqlc.CachedConn
		table string
	}

	PersonalityDiagnoseQuestions struct {
		Id            uint64    `db:"id"`
		PersonalityId uint64    `db:"personality_id"` // パーソナリティ
		Index         int64     `db:"index"`          // 出題順
		Content       string    `db:"content"`        // 設問内容
		CreatedAt     time.Time `db:"created_at"`
		UpdatedAt     time.Time `db:"updated_at"`
	}
)

func newPersonalityDiagnoseQuestionsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPersonalityDiagnoseQuestionsModel {
	return &defaultPersonalityDiagnoseQuestionsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`personality_diagnose_questions`",
	}
}

func (m *defaultPersonalityDiagnoseQuestionsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	personalityDiagnoseQuestionsContentKey := fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsContentPrefix, data.Content)
	personalityDiagnoseQuestionsIdKey := fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsIdPrefix, id)
	personalityDiagnoseQuestionsIndexKey := fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsIndexPrefix, data.Index)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, personalityDiagnoseQuestionsContentKey, personalityDiagnoseQuestionsIdKey, personalityDiagnoseQuestionsIndexKey)
	return err
}

func (m *defaultPersonalityDiagnoseQuestionsModel) FindOne(ctx context.Context, id uint64) (*PersonalityDiagnoseQuestions, error) {
	personalityDiagnoseQuestionsIdKey := fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsIdPrefix, id)
	var resp PersonalityDiagnoseQuestions
	err := m.QueryRowCtx(ctx, &resp, personalityDiagnoseQuestionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", personalityDiagnoseQuestionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPersonalityDiagnoseQuestionsModel) FindOneByContent(ctx context.Context, content string) (*PersonalityDiagnoseQuestions, error) {
	personalityDiagnoseQuestionsContentKey := fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsContentPrefix, content)
	var resp PersonalityDiagnoseQuestions
	err := m.QueryRowIndexCtx(ctx, &resp, personalityDiagnoseQuestionsContentKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `content` = ? limit 1", personalityDiagnoseQuestionsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, content); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPersonalityDiagnoseQuestionsModel) FindOneByIndex(ctx context.Context, index int64) (*PersonalityDiagnoseQuestions, error) {
	personalityDiagnoseQuestionsIndexKey := fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsIndexPrefix, index)
	var resp PersonalityDiagnoseQuestions
	err := m.QueryRowIndexCtx(ctx, &resp, personalityDiagnoseQuestionsIndexKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `index` = ? limit 1", personalityDiagnoseQuestionsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, index); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPersonalityDiagnoseQuestionsModel) Insert(ctx context.Context, data *PersonalityDiagnoseQuestions) (sql.Result, error) {
	personalityDiagnoseQuestionsContentKey := fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsContentPrefix, data.Content)
	personalityDiagnoseQuestionsIdKey := fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsIdPrefix, data.Id)
	personalityDiagnoseQuestionsIndexKey := fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsIndexPrefix, data.Index)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, personalityDiagnoseQuestionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PersonalityId, data.Index, data.Content, data.CreatedAt, data.UpdatedAt)
	}, personalityDiagnoseQuestionsContentKey, personalityDiagnoseQuestionsIdKey, personalityDiagnoseQuestionsIndexKey)
	return ret, err
}

func (m *defaultPersonalityDiagnoseQuestionsModel) Update(ctx context.Context, newData *PersonalityDiagnoseQuestions) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	personalityDiagnoseQuestionsContentKey := fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsContentPrefix, data.Content)
	personalityDiagnoseQuestionsIdKey := fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsIdPrefix, data.Id)
	personalityDiagnoseQuestionsIndexKey := fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsIndexPrefix, data.Index)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, personalityDiagnoseQuestionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.PersonalityId, newData.Index, newData.Content, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	}, personalityDiagnoseQuestionsContentKey, personalityDiagnoseQuestionsIdKey, personalityDiagnoseQuestionsIndexKey)
	return err
}

func (m *defaultPersonalityDiagnoseQuestionsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePersonalityDiagnoseQuestionsIdPrefix, primary)
}

func (m *defaultPersonalityDiagnoseQuestionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", personalityDiagnoseQuestionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPersonalityDiagnoseQuestionsModel) tableName() string {
	return m.table
}

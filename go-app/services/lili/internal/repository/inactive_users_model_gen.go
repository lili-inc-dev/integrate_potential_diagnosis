// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	inactiveUsersFieldNames          = builder.RawFieldNames(&InactiveUsers{})
	inactiveUsersRows                = strings.Join(inactiveUsersFieldNames, ",")
	inactiveUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(inactiveUsersFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	inactiveUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(inactiveUsersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheInactiveUsersIdPrefix          = "cache:inactiveUsers:id:"
	cacheInactiveUsersFirebaseUidPrefix = "cache:inactiveUsers:firebaseUid:"
	cacheInactiveUsersLineIdPrefix      = "cache:inactiveUsers:lineId:"
)

type (
	inactiveUsersModel interface {
		Insert(ctx context.Context, data *InactiveUsers) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*InactiveUsers, error)
		FindOneByFirebaseUid(ctx context.Context, firebaseUid string) (*InactiveUsers, error)
		FindOneByLineId(ctx context.Context, lineId string) (*InactiveUsers, error)
		Update(ctx context.Context, data *InactiveUsers) error
		Delete(ctx context.Context, id string) error
	}

	defaultInactiveUsersModel struct {
		sqlc.CachedConn
		table string
	}

	InactiveUsers struct {
		Id          string    `db:"id"`           // ULID
		LineId      string    `db:"line_id"`      // LINEユーザID
		TypeId      uint64    `db:"type_id"`      // ユーザ種別
		FirebaseUid string    `db:"firebase_uid"` // firebase user id
		Name        string    `db:"name"`         // 氏名
		CreatedAt   time.Time `db:"created_at"`
		UpdatedAt   time.Time `db:"updated_at"`
	}
)

func newInactiveUsersModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultInactiveUsersModel {
	return &defaultInactiveUsersModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`inactive_users`",
	}
}

func (m *defaultInactiveUsersModel) Delete(ctx context.Context, id string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	inactiveUsersFirebaseUidKey := fmt.Sprintf("%s%v", cacheInactiveUsersFirebaseUidPrefix, data.FirebaseUid)
	inactiveUsersIdKey := fmt.Sprintf("%s%v", cacheInactiveUsersIdPrefix, id)
	inactiveUsersLineIdKey := fmt.Sprintf("%s%v", cacheInactiveUsersLineIdPrefix, data.LineId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, inactiveUsersFirebaseUidKey, inactiveUsersIdKey, inactiveUsersLineIdKey)
	return err
}

func (m *defaultInactiveUsersModel) FindOne(ctx context.Context, id string) (*InactiveUsers, error) {
	inactiveUsersIdKey := fmt.Sprintf("%s%v", cacheInactiveUsersIdPrefix, id)
	var resp InactiveUsers
	err := m.QueryRowCtx(ctx, &resp, inactiveUsersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", inactiveUsersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInactiveUsersModel) FindOneByFirebaseUid(ctx context.Context, firebaseUid string) (*InactiveUsers, error) {
	inactiveUsersFirebaseUidKey := fmt.Sprintf("%s%v", cacheInactiveUsersFirebaseUidPrefix, firebaseUid)
	var resp InactiveUsers
	err := m.QueryRowIndexCtx(ctx, &resp, inactiveUsersFirebaseUidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `firebase_uid` = ? limit 1", inactiveUsersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, firebaseUid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInactiveUsersModel) FindOneByLineId(ctx context.Context, lineId string) (*InactiveUsers, error) {
	inactiveUsersLineIdKey := fmt.Sprintf("%s%v", cacheInactiveUsersLineIdPrefix, lineId)
	var resp InactiveUsers
	err := m.QueryRowIndexCtx(ctx, &resp, inactiveUsersLineIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `line_id` = ? limit 1", inactiveUsersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, lineId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInactiveUsersModel) Insert(ctx context.Context, data *InactiveUsers) (sql.Result, error) {
	inactiveUsersFirebaseUidKey := fmt.Sprintf("%s%v", cacheInactiveUsersFirebaseUidPrefix, data.FirebaseUid)
	inactiveUsersIdKey := fmt.Sprintf("%s%v", cacheInactiveUsersIdPrefix, data.Id)
	inactiveUsersLineIdKey := fmt.Sprintf("%s%v", cacheInactiveUsersLineIdPrefix, data.LineId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, inactiveUsersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.LineId, data.TypeId, data.FirebaseUid, data.Name, data.CreatedAt, data.UpdatedAt)
	}, inactiveUsersFirebaseUidKey, inactiveUsersIdKey, inactiveUsersLineIdKey)
	return ret, err
}

func (m *defaultInactiveUsersModel) Update(ctx context.Context, newData *InactiveUsers) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	inactiveUsersFirebaseUidKey := fmt.Sprintf("%s%v", cacheInactiveUsersFirebaseUidPrefix, data.FirebaseUid)
	inactiveUsersIdKey := fmt.Sprintf("%s%v", cacheInactiveUsersIdPrefix, data.Id)
	inactiveUsersLineIdKey := fmt.Sprintf("%s%v", cacheInactiveUsersLineIdPrefix, data.LineId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, inactiveUsersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.LineId, newData.TypeId, newData.FirebaseUid, newData.Name, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	}, inactiveUsersFirebaseUidKey, inactiveUsersIdKey, inactiveUsersLineIdKey)
	return err
}

func (m *defaultInactiveUsersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheInactiveUsersIdPrefix, primary)
}

func (m *defaultInactiveUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", inactiveUsersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultInactiveUsersModel) tableName() string {
	return m.table
}

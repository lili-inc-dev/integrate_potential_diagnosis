// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userInterestTopicsFieldNames          = builder.RawFieldNames(&UserInterestTopics{})
	userInterestTopicsRows                = strings.Join(userInterestTopicsFieldNames, ",")
	userInterestTopicsRowsExpectAutoSet   = strings.Join(stringx.Remove(userInterestTopicsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userInterestTopicsRowsWithPlaceHolder = strings.Join(stringx.Remove(userInterestTopicsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheUserInterestTopicsIdPrefix = "cache:userInterestTopics:id:"
)

type (
	userInterestTopicsModel interface {
		Insert(ctx context.Context, data *UserInterestTopics) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserInterestTopics, error)
		Update(ctx context.Context, data *UserInterestTopics) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserInterestTopicsModel struct {
		sqlc.CachedConn
		table string
	}

	UserInterestTopics struct {
		Id      uint64 `db:"id"`
		TopicId uint64 `db:"topic_id"`
		UserId  string `db:"user_id"`
	}
)

func newUserInterestTopicsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserInterestTopicsModel {
	return &defaultUserInterestTopicsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_interest_topics`",
	}
}

func (m *defaultUserInterestTopicsModel) Delete(ctx context.Context, id uint64) error {
	userInterestTopicsIdKey := fmt.Sprintf("%s%v", cacheUserInterestTopicsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userInterestTopicsIdKey)
	return err
}

func (m *defaultUserInterestTopicsModel) FindOne(ctx context.Context, id uint64) (*UserInterestTopics, error) {
	userInterestTopicsIdKey := fmt.Sprintf("%s%v", cacheUserInterestTopicsIdPrefix, id)
	var resp UserInterestTopics
	err := m.QueryRowCtx(ctx, &resp, userInterestTopicsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userInterestTopicsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInterestTopicsModel) Insert(ctx context.Context, data *UserInterestTopics) (sql.Result, error) {
	userInterestTopicsIdKey := fmt.Sprintf("%s%v", cacheUserInterestTopicsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userInterestTopicsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TopicId, data.UserId)
	}, userInterestTopicsIdKey)
	return ret, err
}

func (m *defaultUserInterestTopicsModel) Update(ctx context.Context, data *UserInterestTopics) error {
	userInterestTopicsIdKey := fmt.Sprintf("%s%v", cacheUserInterestTopicsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userInterestTopicsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TopicId, data.UserId, data.Id)
	}, userInterestTopicsIdKey)
	return err
}

func (m *defaultUserInterestTopicsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserInterestTopicsIdPrefix, primary)
}

func (m *defaultUserInterestTopicsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userInterestTopicsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserInterestTopicsModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userTypesFieldNames          = builder.RawFieldNames(&UserTypes{})
	userTypesRows                = strings.Join(userTypesFieldNames, ",")
	userTypesRowsExpectAutoSet   = strings.Join(stringx.Remove(userTypesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userTypesRowsWithPlaceHolder = strings.Join(stringx.Remove(userTypesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheUserTypesIdPrefix   = "cache:userTypes:id:"
	cacheUserTypesNamePrefix = "cache:userTypes:name:"
)

type (
	userTypesModel interface {
		Insert(ctx context.Context, data *UserTypes) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserTypes, error)
		FindOneByName(ctx context.Context, name string) (*UserTypes, error)
		Update(ctx context.Context, data *UserTypes) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserTypesModel struct {
		sqlc.CachedConn
		table string
	}

	UserTypes struct {
		Id   uint64 `db:"id"`
		Name string `db:"name"` // 学生 or 社会人
	}
)

func newUserTypesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserTypesModel {
	return &defaultUserTypesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_types`",
	}
}

func (m *defaultUserTypesModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userTypesIdKey := fmt.Sprintf("%s%v", cacheUserTypesIdPrefix, id)
	userTypesNameKey := fmt.Sprintf("%s%v", cacheUserTypesNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userTypesIdKey, userTypesNameKey)
	return err
}

func (m *defaultUserTypesModel) FindOne(ctx context.Context, id uint64) (*UserTypes, error) {
	userTypesIdKey := fmt.Sprintf("%s%v", cacheUserTypesIdPrefix, id)
	var resp UserTypes
	err := m.QueryRowCtx(ctx, &resp, userTypesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userTypesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTypesModel) FindOneByName(ctx context.Context, name string) (*UserTypes, error) {
	userTypesNameKey := fmt.Sprintf("%s%v", cacheUserTypesNamePrefix, name)
	var resp UserTypes
	err := m.QueryRowIndexCtx(ctx, &resp, userTypesNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", userTypesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTypesModel) Insert(ctx context.Context, data *UserTypes) (sql.Result, error) {
	userTypesIdKey := fmt.Sprintf("%s%v", cacheUserTypesIdPrefix, data.Id)
	userTypesNameKey := fmt.Sprintf("%s%v", cacheUserTypesNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, userTypesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name)
	}, userTypesIdKey, userTypesNameKey)
	return ret, err
}

func (m *defaultUserTypesModel) Update(ctx context.Context, newData *UserTypes) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userTypesIdKey := fmt.Sprintf("%s%v", cacheUserTypesIdPrefix, data.Id)
	userTypesNameKey := fmt.Sprintf("%s%v", cacheUserTypesNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userTypesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Id)
	}, userTypesIdKey, userTypesNameKey)
	return err
}

func (m *defaultUserTypesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserTypesIdPrefix, primary)
}

func (m *defaultUserTypesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userTypesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserTypesModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	desiredAnnualIncomesFieldNames          = builder.RawFieldNames(&DesiredAnnualIncomes{})
	desiredAnnualIncomesRows                = strings.Join(desiredAnnualIncomesFieldNames, ",")
	desiredAnnualIncomesRowsExpectAutoSet   = strings.Join(stringx.Remove(desiredAnnualIncomesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	desiredAnnualIncomesRowsWithPlaceHolder = strings.Join(stringx.Remove(desiredAnnualIncomesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheDesiredAnnualIncomesIdPrefix    = "cache:desiredAnnualIncomes:id:"
	cacheDesiredAnnualIncomesValuePrefix = "cache:desiredAnnualIncomes:value:"
)

type (
	desiredAnnualIncomesModel interface {
		Insert(ctx context.Context, data *DesiredAnnualIncomes) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*DesiredAnnualIncomes, error)
		FindOneByValue(ctx context.Context, value string) (*DesiredAnnualIncomes, error)
		Update(ctx context.Context, data *DesiredAnnualIncomes) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultDesiredAnnualIncomesModel struct {
		sqlc.CachedConn
		table string
	}

	DesiredAnnualIncomes struct {
		Id    uint64 `db:"id"`
		Value string `db:"value"` // 例：〜300万円、300〜500万円
	}
)

func newDesiredAnnualIncomesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultDesiredAnnualIncomesModel {
	return &defaultDesiredAnnualIncomesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`desired_annual_incomes`",
	}
}

func (m *defaultDesiredAnnualIncomesModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	desiredAnnualIncomesIdKey := fmt.Sprintf("%s%v", cacheDesiredAnnualIncomesIdPrefix, id)
	desiredAnnualIncomesValueKey := fmt.Sprintf("%s%v", cacheDesiredAnnualIncomesValuePrefix, data.Value)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, desiredAnnualIncomesIdKey, desiredAnnualIncomesValueKey)
	return err
}

func (m *defaultDesiredAnnualIncomesModel) FindOne(ctx context.Context, id uint64) (*DesiredAnnualIncomes, error) {
	desiredAnnualIncomesIdKey := fmt.Sprintf("%s%v", cacheDesiredAnnualIncomesIdPrefix, id)
	var resp DesiredAnnualIncomes
	err := m.QueryRowCtx(ctx, &resp, desiredAnnualIncomesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", desiredAnnualIncomesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDesiredAnnualIncomesModel) FindOneByValue(ctx context.Context, value string) (*DesiredAnnualIncomes, error) {
	desiredAnnualIncomesValueKey := fmt.Sprintf("%s%v", cacheDesiredAnnualIncomesValuePrefix, value)
	var resp DesiredAnnualIncomes
	err := m.QueryRowIndexCtx(ctx, &resp, desiredAnnualIncomesValueKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `value` = ? limit 1", desiredAnnualIncomesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, value); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDesiredAnnualIncomesModel) Insert(ctx context.Context, data *DesiredAnnualIncomes) (sql.Result, error) {
	desiredAnnualIncomesIdKey := fmt.Sprintf("%s%v", cacheDesiredAnnualIncomesIdPrefix, data.Id)
	desiredAnnualIncomesValueKey := fmt.Sprintf("%s%v", cacheDesiredAnnualIncomesValuePrefix, data.Value)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, desiredAnnualIncomesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Value)
	}, desiredAnnualIncomesIdKey, desiredAnnualIncomesValueKey)
	return ret, err
}

func (m *defaultDesiredAnnualIncomesModel) Update(ctx context.Context, newData *DesiredAnnualIncomes) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	desiredAnnualIncomesIdKey := fmt.Sprintf("%s%v", cacheDesiredAnnualIncomesIdPrefix, data.Id)
	desiredAnnualIncomesValueKey := fmt.Sprintf("%s%v", cacheDesiredAnnualIncomesValuePrefix, data.Value)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, desiredAnnualIncomesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Value, newData.Id)
	}, desiredAnnualIncomesIdKey, desiredAnnualIncomesValueKey)
	return err
}

func (m *defaultDesiredAnnualIncomesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDesiredAnnualIncomesIdPrefix, primary)
}

func (m *defaultDesiredAnnualIncomesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", desiredAnnualIncomesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDesiredAnnualIncomesModel) tableName() string {
	return m.table
}

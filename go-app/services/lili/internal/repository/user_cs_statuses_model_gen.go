// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userCsStatusesFieldNames          = builder.RawFieldNames(&UserCsStatuses{})
	userCsStatusesRows                = strings.Join(userCsStatusesFieldNames, ",")
	userCsStatusesRowsExpectAutoSet   = strings.Join(stringx.Remove(userCsStatusesFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userCsStatusesRowsWithPlaceHolder = strings.Join(stringx.Remove(userCsStatusesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheUserCsStatusesIdPrefix     = "cache:userCsStatuses:id:"
	cacheUserCsStatusesUserIdPrefix = "cache:userCsStatuses:userId:"
)

type (
	userCsStatusesModel interface {
		Insert(ctx context.Context, data *UserCsStatuses) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*UserCsStatuses, error)
		FindOneByUserId(ctx context.Context, userId string) (*UserCsStatuses, error)
		Update(ctx context.Context, data *UserCsStatuses) error
		Delete(ctx context.Context, id string) error
	}

	defaultUserCsStatusesModel struct {
		sqlc.CachedConn
		table string
	}

	UserCsStatuses struct {
		Id     string `db:"id"`
		UserId string `db:"user_id"`
		Status string `db:"status"` // CSステータス
	}
)

func newUserCsStatusesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserCsStatusesModel {
	return &defaultUserCsStatusesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_cs_statuses`",
	}
}

func (m *defaultUserCsStatusesModel) Delete(ctx context.Context, id string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userCsStatusesIdKey := fmt.Sprintf("%s%v", cacheUserCsStatusesIdPrefix, id)
	userCsStatusesUserIdKey := fmt.Sprintf("%s%v", cacheUserCsStatusesUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userCsStatusesIdKey, userCsStatusesUserIdKey)
	return err
}

func (m *defaultUserCsStatusesModel) FindOne(ctx context.Context, id string) (*UserCsStatuses, error) {
	userCsStatusesIdKey := fmt.Sprintf("%s%v", cacheUserCsStatusesIdPrefix, id)
	var resp UserCsStatuses
	err := m.QueryRowCtx(ctx, &resp, userCsStatusesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userCsStatusesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCsStatusesModel) FindOneByUserId(ctx context.Context, userId string) (*UserCsStatuses, error) {
	userCsStatusesUserIdKey := fmt.Sprintf("%s%v", cacheUserCsStatusesUserIdPrefix, userId)
	var resp UserCsStatuses
	err := m.QueryRowIndexCtx(ctx, &resp, userCsStatusesUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userCsStatusesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCsStatusesModel) Insert(ctx context.Context, data *UserCsStatuses) (sql.Result, error) {
	userCsStatusesIdKey := fmt.Sprintf("%s%v", cacheUserCsStatusesIdPrefix, data.Id)
	userCsStatusesUserIdKey := fmt.Sprintf("%s%v", cacheUserCsStatusesUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userCsStatusesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Status)
	}, userCsStatusesIdKey, userCsStatusesUserIdKey)
	return ret, err
}

func (m *defaultUserCsStatusesModel) Update(ctx context.Context, newData *UserCsStatuses) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userCsStatusesIdKey := fmt.Sprintf("%s%v", cacheUserCsStatusesIdPrefix, data.Id)
	userCsStatusesUserIdKey := fmt.Sprintf("%s%v", cacheUserCsStatusesUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userCsStatusesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.Status, newData.Id)
	}, userCsStatusesIdKey, userCsStatusesUserIdKey)
	return err
}

func (m *defaultUserCsStatusesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserCsStatusesIdPrefix, primary)
}

func (m *defaultUserCsStatusesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userCsStatusesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserCsStatusesModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT!

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminRolesFieldNames          = builder.RawFieldNames(&AdminRoles{})
	adminRolesRows                = strings.Join(adminRolesFieldNames, ",")
	adminRolesRowsExpectAutoSet   = strings.Join(stringx.Remove(adminRolesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	adminRolesRowsWithPlaceHolder = strings.Join(stringx.Remove(adminRolesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheAdminRolesIdPrefix   = "cache:adminRoles:id:"
	cacheAdminRolesNamePrefix = "cache:adminRoles:name:"
)

type (
	adminRolesModel interface {
		Insert(ctx context.Context, data *AdminRoles) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*AdminRoles, error)
		FindOneByName(ctx context.Context, name string) (*AdminRoles, error)
		Update(ctx context.Context, data *AdminRoles) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultAdminRolesModel struct {
		sqlc.CachedConn
		table string
	}

	AdminRoles struct {
		Id                      uint64         `db:"id"`
		Name                    string         `db:"name"`
		AdminBrowsable          bool           `db:"admin_browsable"`
		AdminEditable           bool           `db:"admin_editable"`
		UserBrowsable           bool           `db:"user_browsable"`
		UserEditable            bool           `db:"user_editable"`
		CompanyBrowsable        bool           `db:"company_browsable"`
		CompanyEditable         bool           `db:"company_editable"`
		ProjectBrowsable        bool           `db:"project_browsable"`
		ProjectEditable         bool           `db:"project_editable"`
		ProjectDisclosable      bool           `db:"project_disclosable"` // プロジェクト公開権限
		ProjectCommentBrowsable bool           `db:"project_comment_browsable"`
		ProjectCommentEditable  bool           `db:"project_comment_editable"`
		ProjectCommentPostable  bool           `db:"project_comment_postable"` // プロジェクトコメント投稿権限
		NoticeBrowsable         bool           `db:"notice_browsable"`
		NoticeEditable          bool           `db:"notice_editable"`
		Description             sql.NullString `db:"description"`
		CreatedAt               time.Time      `db:"created_at"`
		UpdatedAt               time.Time      `db:"updated_at"`
	}
)

func newAdminRolesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAdminRolesModel {
	return &defaultAdminRolesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`admin_roles`",
	}
}

func (m *defaultAdminRolesModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	adminRolesIdKey := fmt.Sprintf("%s%v", cacheAdminRolesIdPrefix, id)
	adminRolesNameKey := fmt.Sprintf("%s%v", cacheAdminRolesNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, adminRolesIdKey, adminRolesNameKey)
	return err
}

func (m *defaultAdminRolesModel) FindOne(ctx context.Context, id uint64) (*AdminRoles, error) {
	adminRolesIdKey := fmt.Sprintf("%s%v", cacheAdminRolesIdPrefix, id)
	var resp AdminRoles
	err := m.QueryRowCtx(ctx, &resp, adminRolesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminRolesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminRolesModel) FindOneByName(ctx context.Context, name string) (*AdminRoles, error) {
	adminRolesNameKey := fmt.Sprintf("%s%v", cacheAdminRolesNamePrefix, name)
	var resp AdminRoles
	err := m.QueryRowIndexCtx(ctx, &resp, adminRolesNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", adminRolesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminRolesModel) Insert(ctx context.Context, data *AdminRoles) (sql.Result, error) {
	adminRolesIdKey := fmt.Sprintf("%s%v", cacheAdminRolesIdPrefix, data.Id)
	adminRolesNameKey := fmt.Sprintf("%s%v", cacheAdminRolesNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminRolesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.AdminBrowsable, data.AdminEditable, data.UserBrowsable, data.UserEditable, data.CompanyBrowsable, data.CompanyEditable, data.ProjectBrowsable, data.ProjectEditable, data.ProjectDisclosable, data.ProjectCommentBrowsable, data.ProjectCommentEditable, data.ProjectCommentPostable, data.NoticeBrowsable, data.NoticeEditable, data.CreatedAt, data.UpdatedAt)
	}, adminRolesIdKey, adminRolesNameKey)
	return ret, err
}

func (m *defaultAdminRolesModel) Update(ctx context.Context, newData *AdminRoles) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	adminRolesIdKey := fmt.Sprintf("%s%v", cacheAdminRolesIdPrefix, data.Id)
	adminRolesNameKey := fmt.Sprintf("%s%v", cacheAdminRolesNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminRolesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.AdminBrowsable, newData.AdminEditable, newData.UserBrowsable, newData.UserEditable, newData.CompanyBrowsable, newData.CompanyEditable, newData.ProjectBrowsable, newData.ProjectEditable, newData.ProjectDisclosable, newData.ProjectCommentBrowsable, newData.ProjectCommentEditable, newData.ProjectCommentPostable, newData.NoticeBrowsable, newData.NoticeEditable, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	}, adminRolesIdKey, adminRolesNameKey)
	return err
}

func (m *defaultAdminRolesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAdminRolesIdPrefix, primary)
}

func (m *defaultAdminRolesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminRolesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAdminRolesModel) tableName() string {
	return m.table
}
